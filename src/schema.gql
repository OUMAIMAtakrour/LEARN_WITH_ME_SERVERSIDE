# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  access_token: String!
  refresh_token: String
}

type Badge {
  _id: ID!
  description: String!
  imageUrl: String!
  name: String!
  pointsRequired: Float!
}

type Certificate {
  """Example field (placeholder)"""
  exampleField: Int!
}

type Course {
  _id: ID!
  category: String!
  certified: Boolean!
  courseDocuments: [CourseDocumentType!]!
  courseImageKey: String
  courseImageUrl: String
  courseVideos: [CourseVideo!]!
  createdAt: DateTime!
  description: String!
  teacher: User!
  title: String!
  totalDuration: Float
  updatedAt: DateTime!
}

type CourseDocumentType {
  description: String
  key: String!
  order: Float!
  title: String!
  url: String!
}

type CourseProgress {
  _id: ID!
  completed: Boolean!
  completedAt: DateTime
  courseId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  videosProgress: [VideoProgress!]!
}

type CourseVideo {
  description: String
  duration: Float
  key: String!
  order: Float!
  title: String!
  url: String!
}

input CreateBadgeInput {
  description: String!
  imageUrl: String!
  name: String!
  pointsRequired: Int!
}

input CreateCertificateInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateCourseInput {
  category: String!
  certified: Boolean!
  description: String!
  title: String!
}

input CreateCourseProgressInput {
  """Course ID"""
  courseId: String!

  """User ID"""
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addCourseDocument(courseId: String!, description: String, document: Upload!, title: String!): Course!
  addCourseVideo(courseId: String!, description: String, duration: Float, title: String!, video: Upload!): Course!
  checkAndAwardBadges(points: Float!, userId: ID!): [UserBadge!]!
  createBadge(input: CreateBadgeInput!): Badge!
  createCertificate(createCertificateInput: CreateCertificateInput!): Certificate!
  createCourse(image: Upload, input: CreateCourseInput!): Course!
  createCourseProgress(input: CreateCourseProgressInput!): CourseProgress!
  deleteCourse(id: String!): Boolean!
  login(input: LoginInput!): AuthResponse!
  markCourseAsCompleted(courseId: String!, userId: String!): CourseProgress!
  recalculateTotalDuration(courseId: String!): Course!
  removeBadge(id: ID!): Boolean!
  removeCertificate(id: Int!): Certificate!
  removeCourseDocument(courseId: String!, documentKey: String!): Course!
  removeCourseProgress(id: ID!): CourseProgress!
  removeCourseVideo(courseId: String!, videoKey: String!): Course!
  signup(input: SignupInput!, profileImage: Upload): User!
  updateBadge(id: ID!, input: UpdateBadgeInput!): Badge!
  updateCertificate(updateCertificateInput: UpdateCertificateInput!): Certificate!
  updateCourse(id: String!, input: UpdateCourseInput!): Course!
  updateCourseImage(courseId: String!, image: Upload!): Course!
  updateCourseProgress(id: ID!, input: UpdateCourseProgressInput!): CourseProgress!
  updateCourseVideoDuration(courseId: String!, duration: Float!, videoKey: String!): Course!
  updateProfileImage(profileImage: Upload!): User!
  updateVideoProgress(courseId: String!, userId: String!, videoId: String!, watchedSeconds: Float!): CourseProgress!
}

type Query {
  badge(id: ID!): Badge!
  badges: [Badge!]!
  certificate(id: Int!): Certificate!
  certificates: [Certificate!]!
  completedCourses(userId: String!): [String!]!
  course(id: String!): Course!
  courseProgress(id: ID!): CourseProgress!
  courseProgresses: [CourseProgress!]!
  courses: [Course!]!
  coursesByCategory(category: String!): [Course!]!
  getUserCourseProgress(courseId: String!): CourseProgress
  isCourseCompleted(courseId: String!, userId: String!): Boolean!
  myBadges: [UserBadge!]!
  myCourses: [Course!]!
  userBadges(userId: ID!): [UserBadge!]!
}

input SignupInput {
  email: String!
  name: String!
  password: String!
  role: UserRole
}

input UpdateBadgeInput {
  description: String
  id: Int!
  imageUrl: String
  name: String
  pointsRequired: Int
}

input UpdateCertificateInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateCourseInput {
  category: String
  certified: Boolean
  description: String
  title: String
}

input UpdateCourseProgressInput {
  """Course ID"""
  courseId: String
  id: Int!

  """User ID"""
  userId: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _id: ID!
  email: String!
  name: String!
  password: String!
  points: Float!
  profileImageKey: String
  profileImageUrl: String
  role: UserRole!
}

type UserBadge {
  _id: ID!
  badge: Badge!
  earnedAt: DateTime!
  user: User!
}

enum UserRole {
  ADMIN
  STUDENT
  TEACHER
}

type VideoProgress {
  completed: Boolean!
  videoId: String!
  watchedSeconds: Float!
}